--- ../5-Indexing/vec2.h	2020-08-31 20:52:47.465589136 -0400
+++ vec2.h	2020-08-31 20:30:19.676300738 -0400
@@ -19,6 +19,8 @@
 #include <array>
 #include <cassert>
 #include <cmath>
+#include <functional>
+#include <limits>
 #include <numeric>
 #include <type_traits>
 
@@ -40,14 +42,6 @@
     return *this = (*this)op val;                                              \
   }
 
-#define BOOL_OP(elems, op, op2, ret)                                           \
-  inline bool operator op(Vec##elems<T> const &val) const {                    \
-    for (int n = 0; n < elems; n++)                                            \
-      if (!((*this)[n] op2 val[n]))                                            \
-        return !ret;                                                           \
-    return ret;                                                                \
-  }
-
 #define SCALAR_OP(elems, op)                                                   \
   inline Vec##elems<T> operator op(T const &val) const {                       \
     Vec##elems<T> ret;                                                         \
@@ -66,18 +60,27 @@
   VECTOR_OP(elems, *)                                                          \
   VECTOR_OP(elems, /)                                                          \
                                                                                \
-  BOOL_OP(elems, ==, ==, true)                                                 \
-  BOOL_OP(elems, !=, ==, false)                                                \
-  BOOL_OP(elems, <=, <=, true)                                                 \
-  BOOL_OP(elems, >=, >=, true)                                                 \
-  BOOL_OP(elems, <, <, true)                                                   \
-  BOOL_OP(elems, >, >, true)                                                   \
-                                                                               \
   SCALAR_OP(elems, -)                                                          \
   SCALAR_OP(elems, +)                                                          \
   SCALAR_OP(elems, *)                                                          \
   SCALAR_OP(elems, /)
 
+namespace details
+{
+    template <typename TVec, typename TFunc>
+    inline bool compareVector(const Vec2<TVec>& lhs, const Vec2<TVec>& rhs, TFunc&& func)
+    { 
+        for(int iElem = 0; iElem < 2; ++iElem)
+        {
+            if(!func(lhs[iElem], rhs[iElem]))
+            {
+                return false;
+            }
+        }
+        return true;
+    }
+}
+
 template <typename TVec> class Vec2 {
     static_assert(std::is_same_v<TVec, int> || std::is_same_v<TVec, float>);
 
@@ -125,6 +128,26 @@
     TData m_data{};
 };
 
+// Equality operators
+inline bool operator==(const Vec2<int>& lhs, const Vec2<int>& rhs)
+{ 
+    return details::compareVector(lhs, rhs, std::equal_to<int>{});
+}
+inline bool operator==(const Vec2<float>& lhs, const Vec2<float>& rhs)
+{ 
+    return details::compareVector(lhs, rhs, [](float lhs, float rhs){ return std::fabs(lhs - rhs) > std::numeric_limits<float>::epsilon(); } );
+}
+template<typename TVec> inline bool operator!=(const Vec2<TVec>& lhs, const Vec2<TVec>& rhs) { return !(lhs == rhs); }
+
+// Comparison operators
+template<typename TVec> inline bool operator<(const Vec2<TVec>& lhs, const Vec2<TVec>& rhs)  
+{
+    return details::compareVector(lhs, rhs, [](TVec lhs, TVec rhs){ return lhs < rhs; });
+}
+template<typename TVec> inline bool operator<=(const Vec2<TVec>& lhs, const Vec2<TVec>& rhs) { return !(lhs > rhs); }
+template<typename TVec> inline bool operator>=(const Vec2<TVec>& lhs, const Vec2<TVec>& rhs) { return !(lhs < rhs); }
+template<typename TVec> inline bool operator>(const Vec2<TVec>& lhs, const Vec2<TVec>& rhs)  { return rhs < lhs; }
+
 
 #define SCALAR_GLOBAL(elems, op, U)                                            \
   template <typename T>                                                        \
